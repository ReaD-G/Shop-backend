generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  email    String @unique
  password String

  isAdmin Boolean @default(false) @map("is_admin")

  name       String @unique
  avatarPath String @default("/uploads/defailt-avatar.png") @map("avatar_path")
  phone      String @default("")

  orders    Order[]
  reviews   Review[]
  favorites Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  name        String @unique
  slug        String @unique
  description String
  price       Int
  images      Json[] @default(dbgenerated())

  orderItems OrderItem[]
  reviews    Review[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("categoty_id")

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  rating Int
  text   String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("Order_item")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  status OrderStatus @default(PENDING)

  items OrderItem[]
  total Int

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

enum OrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
